# üß™ Advanced Individual Lab: Multichannel Notification System

## üìÑ Autor

**Gabriel Felipe Fonseca Guerrero**

---

## üõçÔ∏è Descripci√≥n del Sistema

Este proyecto es una API REST desarrollada con Flask que permite registrar usuarios con varios canales de comunicaci√≥n (email, SMS, consola) y enviar notificaciones usando una cadena de responsabilidad. Si el canal preferido falla, se utilizan los canales alternativos, simulando fallos con `random.choice([True, False])`.

---

## üîÑ Patrones de dise√±o utilizados

* **Chain of Responsibility**: para gestionar intentos de notificaci√≥n fallidos a trav√©s de canales alternativos.
* **Factory Pattern**: usado para crear instancias de los canales.
* **Singleton**: utilizado opcionalmente para el logger.

---

## üìÇ Estructura del Proyecto

```
multichannel_notification/
‚îú‚îÄ‚îÄ app.py
‚îú‚îÄ‚îÄ notification_handler.py
‚îú‚îÄ‚îÄ models.py
‚îú‚îÄ‚îÄ logger.py
‚îú‚îÄ‚îÄ swagger_config.py
‚îú‚îÄ‚îÄ requirements.txt
‚îî‚îÄ‚îÄ README.md
```

---

## üöÄ Instalaci√≥n y Ejecuci√≥n

```bash
# Crear entorno virtual (opcional)
python -m venv .venv
source .venv/bin/activate  # Windows: .venv\Scripts\activate

# Instalar dependencias
pip install -r requirements.txt

# Ejecutar servidor
python app.py
```

---

## üõçÔ∏è API Endpoints

### `POST /users`

Registra un nuevo usuario.

```json
{
  "name": "Juan",
  "preferred_channel": "email",
  "available_channels": ["email", "sms"]
}
```

### `GET /users`

Lista todos los usuarios registrados.

### `POST /notifications/send`

Env√≠a una notificaci√≥n a un usuario. Usa Chain of Responsibility para fallback.

```json
{
  "user_name": "Juan",
  "message": "Your appointment is tomorrow.",
  "priority": "high"
}
```

---

## üîπ Ejemplos de curl

```bash
# Crear usuario
curl -X POST http://localhost:5000/users \
  -H "Content-Type: application/json" \
  -d '{"name": "Juan", "preferred_channel": "email", "available_channels": ["email", "sms"]}'

# Enviar notificaci√≥n
curl -X POST http://localhost:5000/notifications/send \
  -H "Content-Type: application/json" \
  -d '{"user_name": "Juan", "message": "Tu cita es ma√±ana", "priority": "high"}'
```

---

## üìë Swagger

Disponible en:

```
http://localhost:5000/swagger
```

---

## üìä Diagrama de M√≥dulos (texto)

```
+-------------+     +----------------------+     +--------------------+
|   app.py    | --> | notification_handler | --> | Logger (singleton) |
+-------------+     +----------------------+     +--------------------+
      |                        ^
      v                        |
  models.py (users)       factory/channel classes
```

---

## üìö Comentarios

El c√≥digo est√° bien comentado, explicando cada clase, funci√≥n y flujo de notificaci√≥n, con enfoque en mantenibilidad y claridad.
